package org.iu.engrcloudcomputing.mapreduce.mapred.master.impl;

import io.grpc.stub.StreamObserver;
import org.iu.engrcloudcomputing.mapreduce.mapred.autogenerated.BeginMapReduceGrpc;
import org.iu.engrcloudcomputing.mapreduce.mapred.autogenerated.Master;
import org.iu.engrcloudcomputing.mapreduce.mapred.manager.MapReduceManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.lang.invoke.MethodHandles;
import java.net.URISyntaxException;
import java.util.List;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;

public class InitiateMapReduceService extends BeginMapReduceGrpc.BeginMapReduceImplBase {

    private static final Logger LOGGER = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass().getSimpleName());

    private ConcurrentMap<String, String> mapperConcurrentMap;
    private ConcurrentMap<String, String> reducerConcurrentMap;
    private CountDownLatch mapReduceTaskLatch;
    private static final String MESSAGE = "Master is assigned to another cluster";
    private String workingFolder;

    public InitiateMapReduceService(ConcurrentMap<String, String> mapperConcurrentMap, ConcurrentMap<String, String> reducerConcurrentMap,
                                    CountDownLatch mapReduceTaskLatch, String workingFolder) {
        this.mapperConcurrentMap = mapperConcurrentMap;
        this.reducerConcurrentMap = reducerConcurrentMap;
        this.mapReduceTaskLatch = mapReduceTaskLatch;
        this.workingFolder = workingFolder;
    }

    @Override
    public void mapReduce(Master.MapReduceParams request, StreamObserver<Master.MapReduceResponse> responseObserver) {

        String initialKey = request.getInitialKey();
        String mapperJar = request.getMapperJar();
        String reducerJar = request.getReducerJar();
        int mappers = request.getMappers();
        int reducers = request.getReducers();
        String kvStoreIpAddress = request.getKvStoreIpAddress();
        int kvStorePort = request.getKvStorePort();
        String masterIpAddress = request.getMasterIpAddress();
        int masterPort = request.getMasterPort();


        if (mapReduceTaskLatch.getCount() < 1) {
            responseObserver.onNext(Master.MapReduceResponse.newBuilder()
                    .setMessage(Master.Message.newBuilder().setResponseCode(400).setResponseMessage(MESSAGE).build())
                    .build());
            responseObserver.onCompleted();
            return;
        }

        MapReduceManager mapReduceManager = new MapReduceManager(kvStoreIpAddress, kvStorePort, masterIpAddress, masterPort,
                mappers, reducers, mapperJar, reducerJar, initialKey, workingFolder, mapperConcurrentMap, reducerConcurrentMap);

        List<String> finalKeys;
        try {
            finalKeys = mapReduceManager.mapReduce();
            responseObserver.onNext(Master.MapReduceResponse.newBuilder()
                    .setMessage(Master.Message.newBuilder().setResponseCode(200).setResponseMessage("OK").build())
                    .setKeys(Master.Keys.newBuilder().addAllKey(finalKeys).build())
                    .build());
        } catch (IOException | ExecutionException | InterruptedException | URISyntaxException e) {
            LOGGER.error("Exception in map reduce task");
            LOGGER.error(e.getMessage());
            responseObserver.onNext(Master.MapReduceResponse.newBuilder()
                    .setMessage(Master.Message.newBuilder().setResponseCode(500).setResponseMessage("ERROR").build())
                    .build());
        } finally {
            responseObserver.onCompleted();
            mapReduceTaskLatch.countDown();
        }
    }
}
