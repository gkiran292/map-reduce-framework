package org.iu.engrcloudcomputing.mapreduce.mapred.master.impl;

import com.google.protobuf.ProtocolStringList;
import io.grpc.stub.StreamObserver;
import org.apache.commons.lang3.StringUtils;
import org.iu.engrcloudcomputing.mapreduce.mapred.autogenerated.MapperAckGrpc;
import org.iu.engrcloudcomputing.mapreduce.mapred.autogenerated.Master;
import org.iu.engrcloudcomputing.mapreduce.mapred.helper.HelperMethod;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.invoke.MethodHandles;
import java.util.concurrent.ConcurrentMap;

public class MapperAckService extends MapperAckGrpc.MapperAckImplBase {

    private static final Logger LOGGER = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass().getSimpleName());
    private ConcurrentMap<String, String> concurrentMap;

    public MapperAckService(ConcurrentMap<String, String> concurrentMap) {
        this.concurrentMap = concurrentMap;
    }

    @Override
    public void mappedKeys(Master.Keys request, StreamObserver<Master.Message> responseObserver) {

        ProtocolStringList keyList = request.getKeyList();
        HelperMethod.storeKeys(concurrentMap, keyList);

        LOGGER.info("Acknowledged and results are stored from Mapper: {}", keyList.get(0).split("_")[0]);
        responseObserver.onNext(Master.Message.newBuilder().setResponseCode(200).setResponseMessage("OK").build());
        responseObserver.onCompleted();
    }
}
